@page "/board"

@using CardsBlazor.Data
@using CardsBlazor.ApiControllers
@using System.Timers
@using Serilog
@inject PlayerService PlayerService
@inject IJSRuntime JsRuntime;

<h3>The Board</h3>
@if (PlayerList != null)
{
    <table class="table">
        <thead class="thead-dark">
        <tr>
            @foreach (var player in PlayerList)
            {
                <th>@player.RealName</th>
            }
        </tr>
        </thead>

        <tr>
            @foreach (var player in PlayerList)
            {
                <td>@player.CurrentPosition.ToString("c2")</td>
            }
        </tr>
    </table>
    <SfSwitch @bind-Checked="AutoRefresh" OnFocus="Test">Auto Refresh</SfSwitch>
}

@code {
    private List<PlayerViewModel> PlayerList;
    private bool AutoRefresh = false;
    
    private TimerPlus _timer;
    private double TimeLeft
    {
        get
        {
            if (_timer == null) return 0;
            return (_timer.TimeLeft / _timer.Interval) * 100;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        PlayerList = await PlayerService.GetPlayersViewModel();
        _timer = new TimerPlus
        {
            Interval = 5000,
            Enabled = false
        };
        _timer.Elapsed += TimerOnElapsed;
        StateHasChanged();
    }
    
    private void StartAutoRefresh()
    {
        if (AutoRefresh)
        {
            _timer.Start();
        }
        else
        {
            _timer.Stop();
        }
    }

    private async void TimerOnElapsed(object sender, ElapsedEventArgs e)
    {
        Log.Information("Refreshing screen");
        PlayerList = await PlayerService.GetPlayersViewModel();
        StartAutoRefresh();
        await InvokeAsync(StateHasChanged);
    }

    public class TimerPlus : System.Timers.Timer
    {
        private DateTime m_dueTime;

        public TimerPlus() : base()
        {
            this.Elapsed += this.ElapsedAction;
        }

        protected new void Dispose()
        {
            this.Elapsed -= this.ElapsedAction;
            base.Dispose();
        }

        public double TimeLeft
        {
            get
            {
                return (this.m_dueTime - DateTime.Now).TotalMilliseconds;
            }
        }

        public new void Start()
        {
            this.m_dueTime = DateTime.Now.AddMilliseconds(this.Interval);
            base.Start();
        }

        private void ElapsedAction(object sender, System.Timers.ElapsedEventArgs e)
        {
            if (this.AutoReset)
            {
                this.m_dueTime = DateTime.Now.AddMilliseconds(this.Interval);
            }
        }
    }

}
