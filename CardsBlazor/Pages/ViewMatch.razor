@page "/ViewMatch/{Id:int}"
@using CardsBlazor.Data
@using CardsBlazor.Data.Entity
@using CardsBlazor.Data.ViewModels
@using CardsBlazor.ApiControllers
@using Microsoft.AspNetCore.Http
@using Newtonsoft.Json
@using Serilog
@inject MatchService MatchService
@inject IJSRuntime JsRuntime
@if (matchView.EntranceFee == 0)
{
    <h3>@matchView.Game.Name</h3>
}
else
{
    <h3>@matchView.Game.Name for @matchView.EntranceFee.ToString("C2")</h3>
}

<h4>Started at @matchView.StartTime.ToString("yyyy-MM-dd HH:mm:ss")</h4>
@if (matchView.IsResolved && matchView.EndTime != null && !matchView.Archived)
{
    <h4>Resolved at @matchView.EndTime.Value.ToString("yyyy-MM-dd HH:mm:ss")</h4>
    <h4>Won by @matchView.Participants.FirstOrDefault(x => x.IsWinner != null && x.IsWinner.Value)?.RealName</h4>
}
else if (matchView.Archived && matchView.EndTime != null)
{
    <h4>Archived at at @matchView.EndTime.Value.ToString("yyyy-MM-dd HH:mm:ss")</h4>
}
<div align="right">
    <AuthorizeView Roles="admin">
        <Authorized>
            <SfButton Disabled="IsDisabled" CssClass="e-success" IconCss="oi oi-plus" OnClick="ShowAddDialog">Add</SfButton>
            <SfButton Disabled="IsDisabled" CssClass="e-danger" IconCss="oi oi-trash" OnClick="ArchiveGame">Archive</SfButton>
        </Authorized>
    </AuthorizeView>
</div>
<div>
    <SfDialog Header="Add Player" Width="400px" Height="350px" Visible="false" @ref="DialogObj">
        <DialogTemplates>
            <Content>
                <div disabled="@ValidationIsVisible">@ValidationError</div>
                <SfMultiSelect TValue="List<int>" Placeholder="Choose Players" DataSource="@AvailablePlayers" @bind-Value="PlayersToAdd">
                    <MultiSelectFieldSettings Text="RealName" Value="PlayerId"></MultiSelectFieldSettings>
                </SfMultiSelect>
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton OnClick="AddPlayer">
                <DialogButtonModel Content="OK" IsPrimary="true"></DialogButtonModel>
            </DialogButton>
            <DialogButton OnClick="CloseAddDialog">
                <DialogButtonModel Content="Cancel"></DialogButtonModel>
            </DialogButton>
        </DialogButtons>
    </SfDialog>
</div>
Player List:
<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            @if (matchView.IsResolved)
            {
                <th>Net Result</th>
            }
            <th>Actions</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var party in matchView.Participants)
        {
            var partyId = party.ParticipantId;
            <tr>

                @if (!party.IsResolved)
                {
                    <td>@party.RealName</td>
                    <td>
                        <SfButton CssClass="e-info" IconCss="oi oi-pencil"></SfButton>
                        <SfButton CssClass="e-success" IconCss="oi oi-check" OnClick="() => ClickedWinner(partyId)"></SfButton>
                        <SfButton CssClass="e-danger" IconCss="oi oi-trash" OnClick="() => MarkArchived(partyId)"></SfButton>
                    </td>
                }
                else
                {
                    if (party.IsWinner.HasValue && party.IsWinner.Value)
                    {
                        <td style="font-weight:bold">@party.RealName</td>
                    }
                    else
                    {
                        <td style="text-decoration-line:line-through">@party.RealName</td>
                    }
                    <td>@party.NetResult.Value.ToString("C2")</td>
                    <td>
                        <SfButton CssClass="e-info" IconCss="oi oi-pencil"></SfButton>
                        <SfButton CssClass="e-success" IconCss="oi oi-check"></SfButton>
                        <SfButton CssClass="e-danger" IconCss="oi oi-trash"></SfButton>
                    </td>
                }


            </tr>
        }
    </tbody>
</table>

@if (matchView.Game.NumberOfWinners == NumberOfWinners.MultiWinner)
{
    <SfDialog @bind-Visible="IsMultiDialogVisible" Width="445px">
        <DialogTemplates>
            <Header>
                <div style="color:red">Complete Multi Winner Game</div>
            </Header>
            <Content>
                <div disabled="@ValidationIsVisible">@ValidationError</div>
                @foreach (var party in matchView.Participants)
                {
                    var newPartyId = party.ParticipantId;
                    <div>
                        @party.RealName
                    </div>
                    <div>
                        <SfNumericTextBox TValue="decimal" Format="c2" @bind-Value="@MatchResults[newPartyId]" Enabled="!matchView.IsResolved"></SfNumericTextBox>
                    </div>
                }
            </Content>
            <FooterTemplate>
                <SfButton CssClass="e-success" IconCss="oi oi-check" OnClick=@ClickedMultiWinner>Success</SfButton>
                <SfButton CssClass="e-danger" IconCss="oi oi-trash" OnClick="@CloseDialog">Cancel</SfButton>
            </FooterTemplate>
        </DialogTemplates>
    </SfDialog>
}

@code {
    [Parameter]
    public int Id { get; set; }

    SfDialog DialogObj;

    private PartyViewModel winnerModel { get; set; }
    private MatchViewModel matchView { get; set; }
    protected bool IsDisabled { get; set; }
    private bool IsMultiDialogVisible { get; set; } = false;
    private string ValidationError { get; set; } = "";
    private bool ValidationIsVisible { get; set; } = false;

    private Dictionary<int, decimal> MatchResults { get; set; }

    private List<int> PlayersToAdd { get; set; }
    private List<PlayerViewModel> AvailablePlayers { get; set; } = new List<PlayerViewModel>();
    protected override async Task OnInitializedAsync()
    {

        var result = MatchService.GetMatch(Id);
        if (result == null)
        {
            //Todo do something to handle the missing result
            IsDisabled = true;
        }
        else if (result.IsResolved)
        {
            matchView = new MatchViewModel(result);

            IsDisabled = true;

        }
        else
        {
            matchView = new MatchViewModel(result);
            IsDisabled = false;
            AvailablePlayers = MatchService.GetAvailablePlayers(matchView.MatchId);
        }
        if (result != null && result.Game.NumberOfWinners == NumberOfWinners.MultiWinner)
        {
            MatchResults = matchView.Participants.ToDictionary(x => x.ParticipantId, model => model.NetResult.GetValueOrDefault(0));
        }
    }

    private async void ClickedWinner(int partyId)
    {
        Serilog.Log.Information($"Marking {partyId} as winner of {matchView.MatchId}");
        if (matchView.Game.NumberOfWinners == NumberOfWinners.MultiWinner)
        {
            MatchResults = matchView.Participants.ToDictionary(x => x.ParticipantId, model => model.NetResult.GetValueOrDefault(0));
            IsMultiDialogVisible = true;
        }
        else
        {
            bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
            if (confirmed)
            {
                switch (matchView.WinnerCount)
                {
                    case NumberOfWinners.SingleWinner:
                        MatchService.ResolveSingleWinnerMatch(matchView.MatchId, partyId);
                        break;
                    default:
                        return;
                }

                RefreshScreen();
                IsDisabled = true;
            }
        }


    }
    private void MarkArchived(int partyId)
    {
        Serilog.Log.Information($"Archiving {partyId} on {matchView.MatchId}");
        MatchService.ArchivePlayer(partyId);
        RefreshScreen();
    }

    private void CloseDialog()
    {
        IsMultiDialogVisible = false;
    }

    private void ClickedMultiWinner()
    {
        if (MatchResults.Sum(x => x.Value) != 0)
        {
            ValidationError = "The numbers do not equal out. Please try again";
            ValidationIsVisible = true;
            this.StateHasChanged();
            return;
        }
        ValidationIsVisible = false;
        ValidationError = "";
        this.StateHasChanged();
        foreach (var kvp in MatchResults)
        {
            Serilog.Log.Information($"Party {kvp.Key} has result {kvp.Value:c2}");
        }
        MatchService.ResolveMultiWinnerMatch(matchView.MatchId, MatchResults);
        var result = MatchService.GetMatch(Id);
        CloseDialog();
        RefreshScreen();

        IsDisabled = true;
        this.StateHasChanged();
    }

    private void ShowAddDialog()
    {
        AvailablePlayers = MatchService.GetAvailablePlayers(matchView.MatchId);
        PlayersToAdd = new List<int>();
        this.StateHasChanged();
        DialogObj.Show();
    }

    private void CloseAddDialog()
    {
        DialogObj.Hide();
        this.StateHasChanged();
    }

    private void AddPlayer()
    {
        Log.Information($"Adding {PlayersToAdd.Count} players to match {matchView.MatchId}");
        try
        {
            MatchService.AddPlayers(matchView.MatchId, PlayersToAdd);
        }
        catch (PlayerNotFoundException e)
        {
            e.Data.Add("Players", JsonConvert.SerializeObject(PlayersToAdd));
            Log.Error(e, "Failed to find Player");
            ValidationIsVisible = true;
            ValidationError = "Failed to find these Players. Please try again";
        }

        RefreshScreen();
        DialogObj.Hide();
    }

    private async void ArchiveGame()
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to archive this game?");
        if (confirmed)
        {
            MatchService.ArchiveMatch(matchView.MatchId);
            RefreshScreen();
            IsDisabled = true;
            StateHasChanged();
        }
    }

    private void RefreshScreen()
    {
        ClearValidation();
        var result = MatchService.GetMatch(Id);
        matchView = new MatchViewModel(result);
        StateHasChanged();
    }
    private void ClearValidation()
    {
        ValidationIsVisible = false;
        ValidationError = "";
        StateHasChanged();
    }

}
