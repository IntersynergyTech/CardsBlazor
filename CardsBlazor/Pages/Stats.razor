@page "/stats"
@using CardsBlazor.Data
@using CardsBlazor.Data.ViewModels
@using Serilog
@using Syncfusion.Blazor.Charts
@inject MatchService MatchService
@inject PlayerService PlayerService
<h3>Statistics</h3>
<div class="col-10">
    <SfChart @ref="Chartobj">
        <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.DateTime" Title="Date">
            <ChartSeriesCollection>
                <ChartSeries Name="@nameof(PositionGraphClass.WeekDate)" DataSource="@chartData" YName="@nameof(PositionGraphClass.PositionAtTime)" XName="@nameof(PositionGraphClass.WeekDate)">
                    <ChartSeriesAnimation Enable="false"> </ChartSeriesAnimation>
                </ChartSeries>
            </ChartSeriesCollection>
        </ChartPrimaryXAxis>
        <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
        <ChartPrimaryYAxis Title="Net Position"></ChartPrimaryYAxis>

    </SfChart>
</div>
@code {
    public SfChart Chartobj;
    public string[] colors = new string[] { "Red", "Green", "Blue", "Yellow", "Orange", "Purple", "Black", "Aqua", "Lime", "Gray" };
    private Random rnd = new Random();
    public List<PositionGraphClass> chartData = new List<PositionGraphClass>();
    protected override async Task OnInitializedAsync()
    {
        var results = await PlayerService.GetPlayersViewModel();
        var graphResults = results.ToDictionary(player => player.PlayerId, player => PlayerService.GetPositionGraphClasses(player.PlayerId));
        List<ChartSeries> seriesCollection = new List<ChartSeries>();

        foreach (var kvp in graphResults)
        {
            seriesCollection.Add(new ChartSeries
            {
                Name = kvp.Key.ToString(),
                XName = nameof(PositionGraphClass.WeekDate),
                YName = nameof(PositionGraphClass.PositionAtTime),
                DataSource = kvp.Value,
                Type = ChartSeriesType.Line,
                Fill = colors[rnd.Next(colors.Length - 1)],
                Animation = new ChartSeriesAnimation { Enable = false }
            });
        }
        await Chartobj.AddSeries(seriesCollection.First());
        chartData = graphResults.First().Value;
        StateHasChanged();
    }
}
